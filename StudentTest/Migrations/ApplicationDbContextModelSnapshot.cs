// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentTest.Models;

#nullable disable

namespace StudentTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentTest.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "char",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "string",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "bool",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerText = "int",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 5,
                            AnswerText = "int",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 6,
                            AnswerText = "string",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 7,
                            AnswerText = "bool",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 8,
                            AnswerText = "decimal",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 9,
                            AnswerText = "+",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 10,
                            AnswerText = "&",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 11,
                            AnswerText = "!",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 12,
                            AnswerText = "-",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            AnswerId = 13,
                            AnswerText = "false",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 14,
                            AnswerText = "true",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 15,
                            AnswerText = "null",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 16,
                            AnswerText = "0",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            AnswerId = 17,
                            AnswerText = "It belongs to the class, not the instance",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 18,
                            AnswerText = "It is inherited",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 19,
                            AnswerText = "It is abstract",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 20,
                            AnswerText = "It is readonly",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            AnswerId = 21,
                            AnswerText = "The 'try' keyword is used to start an exception handling block in C#",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 23,
                            AnswerText = "It is inherited",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 24,
                            AnswerText = "It is abstract",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 25,
                            AnswerText = "It is readonly",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            AnswerId = 26,
                            AnswerText = "Console.WriteLine()",
                            IsCorrect = true,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 27,
                            AnswerText = "Console.Output()",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 28,
                            AnswerText = "Console.PrintLine()",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 29,
                            AnswerText = "System.Console()",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            AnswerId = 30,
                            AnswerText = "4 bytes",
                            IsCorrect = true,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 31,
                            AnswerText = "8 bytes",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 32,
                            AnswerText = "2 bytes",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 33,
                            AnswerText = "16 bytes",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            AnswerId = 34,
                            AnswerText = "Converting a value type to an object type",
                            IsCorrect = true,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 35,
                            AnswerText = "Converting a reference type to a value type",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 36,
                            AnswerText = "Converting an int to a string",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 37,
                            AnswerText = "Converting an object type to a value type",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            AnswerId = 38,
                            AnswerText = "System.Object",
                            IsCorrect = true,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 39,
                            AnswerText = "System.Base",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 40,
                            AnswerText = "System.Class",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 41,
                            AnswerText = "System.Root",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            AnswerId = 42,
                            AnswerText = "A contract that classes must implement",
                            IsCorrect = true,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 43,
                            AnswerText = "A class with only static methods",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 44,
                            AnswerText = "A sealed class",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 45,
                            AnswerText = "A method that cannot return a value",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            AnswerId = 46,
                            AnswerText = "Sealed",
                            IsCorrect = true,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 47,
                            AnswerText = "Abstract",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 48,
                            AnswerText = "Virtual",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 49,
                            AnswerText = "Static",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            AnswerId = 50,
                            AnswerText = "The ability of a method to have different implementations",
                            IsCorrect = true,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 51,
                            AnswerText = "The ability to inherit from multiple classes",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 52,
                            AnswerText = "The ability of a class to have multiple constructors",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 53,
                            AnswerText = "The ability to overload operators",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            AnswerId = 54,
                            AnswerText = "The method does not return a value",
                            IsCorrect = true,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 55,
                            AnswerText = "The method returns an integer",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 56,
                            AnswerText = "The method can return any type",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 57,
                            AnswerText = "The method is static",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            AnswerId = 58,
                            AnswerText = "String",
                            IsCorrect = true,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 59,
                            AnswerText = "Int",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 60,
                            AnswerText = "Char",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 61,
                            AnswerText = "Float",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            AnswerId = 62,
                            AnswerText = "It makes a variable assignable only in declaration or constructor",
                            IsCorrect = true,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 63,
                            AnswerText = "It prevents the variable from being assigned a value",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 64,
                            AnswerText = "It makes a variable accessible only within its class",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 65,
                            AnswerText = "It allows the variable to be modified from anywhere",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            AnswerId = 66,
                            AnswerText = "2,147,483,647",
                            IsCorrect = true,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 67,
                            AnswerText = "9,223,372,036,854,775,807",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 68,
                            AnswerText = "32,767",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 69,
                            AnswerText = "65,535",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            AnswerId = 70,
                            AnswerText = "11",
                            IsCorrect = true,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 71,
                            AnswerText = "14",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 72,
                            AnswerText = "7",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 73,
                            AnswerText = "10",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            AnswerId = 74,
                            AnswerText = "do...while",
                            IsCorrect = true,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 75,
                            AnswerText = "while",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 76,
                            AnswerText = "for",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 77,
                            AnswerText = "foreach",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            AnswerId = 78,
                            AnswerText = "private",
                            IsCorrect = true,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 79,
                            AnswerText = "public",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 80,
                            AnswerText = "protected",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            AnswerId = 81,
                            AnswerText = "internal",
                            IsCorrect = false,
                            QuestionId = 20
                        });
                });

            modelBuilder.Entity("StudentTest.Models.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("StudentTest.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            Explanation = "The 'char' keyword is used to declare a character in C#.",
                            QuestionText = "Which of the following is the correct syntax for declaring a character in C#?"
                        },
                        new
                        {
                            QuestionId = 2,
                            Explanation = "int is a value type in C#, while string is a reference type.",
                            QuestionText = "Which of the following is a value type in C#?"
                        },
                        new
                        {
                            QuestionId = 3,
                            Explanation = "The '+' operator is used to concatenate strings in C#.",
                            QuestionText = "Which operator is used for concatenation in C#?"
                        },
                        new
                        {
                            QuestionId = 4,
                            Explanation = "The default value of a Boolean variable is 'false' in C#.",
                            QuestionText = "What is the default value of a Boolean in C#?"
                        },
                        new
                        {
                            QuestionId = 5,
                            Explanation = "The 'static' keyword means that a member belongs to the type itself rather than to a specific object.",
                            QuestionText = "What does the keyword 'static' mean in C#?"
                        },
                        new
                        {
                            QuestionId = 6,
                            Explanation = "The 'try' keyword is used to start an exception handling block in C#.",
                            QuestionText = "Which keyword is used to handle exceptions in C#?"
                        },
                        new
                        {
                            QuestionId = 7,
                            Explanation = "The 'Console.WriteLine()' method outputs a line of text to the console.",
                            QuestionText = "Which method is used to output a line of text to the console in C#?"
                        },
                        new
                        {
                            QuestionId = 8,
                            Explanation = "An 'int' in C# is 32-bits, which is 4 bytes.",
                            QuestionText = "What is the size of an int in C#?"
                        },
                        new
                        {
                            QuestionId = 9,
                            Explanation = "Boxing is the process of converting a value type to an object type in C#.",
                            QuestionText = "What is boxing in C#?"
                        },
                        new
                        {
                            QuestionId = 10,
                            Explanation = "'System.Object' is the base class of all classes in C#.",
                            QuestionText = "What is the base class of all classes in C#?"
                        },
                        new
                        {
                            QuestionId = 11,
                            Explanation = "An interface defines a contract that implementing classes must follow in C#.",
                            QuestionText = "What is an interface in C#?"
                        },
                        new
                        {
                            QuestionId = 12,
                            Explanation = "'sealed' types cannot be inherited in C#.",
                            QuestionText = "Which of the following types in C# does not allow for inheritance?"
                        },
                        new
                        {
                            QuestionId = 13,
                            Explanation = "Polymorphism allows methods to have different implementations depending on the object calling them.",
                            QuestionText = "What is polymorphism in C#?"
                        },
                        new
                        {
                            QuestionId = 14,
                            Explanation = "The 'void' keyword indicates that the method does not return any value.",
                            QuestionText = "What does the keyword 'void' indicate in a method declaration?"
                        },
                        new
                        {
                            QuestionId = 15,
                            Explanation = "String is a reference type in C#.",
                            QuestionText = "Which of the following is a reference type in C#?"
                        },
                        new
                        {
                            QuestionId = 16,
                            Explanation = "'readonly' variables can only be assigned values during declaration or in the constructor.",
                            QuestionText = "What is the purpose of the 'readonly' keyword in C#?"
                        },
                        new
                        {
                            QuestionId = 17,
                            Explanation = "The maximum value of an 'int' in C# is 2,147,483,647.",
                            QuestionText = "What is the maximum value of an int in C#?"
                        },
                        new
                        {
                            QuestionId = 18,
                            Explanation = "The result is 11 due to operator precedence (multiplication before addition).",
                            QuestionText = "What is the result of the expression '3 + 4 * 2' in C#?"
                        },
                        new
                        {
                            QuestionId = 19,
                            Explanation = "'do...while' loops are guaranteed to execute at least once.",
                            QuestionText = "Which of the following loops in C# is guaranteed to execute at least once?"
                        },
                        new
                        {
                            QuestionId = 20,
                            Explanation = "The 'private' access modifier restricts access to the class in which the member is defined.",
                            QuestionText = "Which access modifier in C# allows a class member to be accessible only within its own class?"
                        });
                });

            modelBuilder.Entity("StudentTest.Models.TestSubmission", b =>
                {
                    b.Property<int>("SelectedAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SelectedAnswerId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("SelectedAnswerId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("TestSubmissions");
                });

            modelBuilder.Entity("StudentTest.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StudentTest.Models.UserLogin", b =>
                {
                    b.Property<int>("UserLoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserLoginId"));

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserLoginId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("StudentTest.Models.Answer", b =>
                {
                    b.HasOne("StudentTest.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StudentTest.Models.TestSubmission", b =>
                {
                    b.HasOne("StudentTest.Models.Question", "Question")
                        .WithOne("TestSubmission")
                        .HasForeignKey("StudentTest.Models.TestSubmission", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("StudentTest.Models.UserLogin", b =>
                {
                    b.HasOne("StudentTest.Models.User", "User")
                        .WithOne("UserLogin")
                        .HasForeignKey("StudentTest.Models.UserLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentTest.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("TestSubmission")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentTest.Models.User", b =>
                {
                    b.Navigation("UserLogin")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
